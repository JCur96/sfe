NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
library(sfe)
library(rgeos)
library(rgdal)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins <- makeConvexHulls(NHM_Pangolins)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins <- clipHullsToLand(NHM_Pangolins)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins <- makeLandClippedHulls(NHM_Pangolins)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
# head(NHM_Pangolins)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
# install.packages('lme4')
# install.packages('lmerTest')
library(lme4)
library(lmerTest)
# First I plot out the data to explore it.
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=binomial_overlap)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
p
p2 <- ggplot(NHM_Pangolins, aes(x=Decade, y=binomial_overlap)) +
geom_point()
p2
p3 <- ggplot(NHM_Pangolins, aes(x=binomial, y=distance)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
p3
p4 <- ggplot(NHM_Pangolins, aes(x=Decade, y=distance)) +
geom_point()
p4
gridExtra::grid.arrange(p, p2, p3, p4, ncol=2)
# Then I model to see if the trends I think I'm seeing are actually there
binomialModel <- glmer(binomial_overlap ~ Year + (1|binomial),
data = NHM_Pangolins, family = 'binomial')
distanceModel <- lmer(1/log(distance) ~ Decade + (1|binomial),
data = NHM_Pangolins)
# And then we plot some these just to see
# WILL BE USING GGPLOT FOR THIS BUT FOR STARTERS LETS JUST BASE PLOT
plot(binomialModel)
plot(distanceModel)
# or potentially
binomialModel2 <- glmer(binomial_overlap ~ binomial + (1|Decade),
data = NHM_Pangolins, family = 'binomial')
distanceModel2 <- lmer(distance ~ binomial + (1|Decade),
data = NHM_Pangolins)
# And then we plot some these just to see
# WILL BE USING GGPLOT FOR THIS BUT FOR STARTERS LETS JUST BASE PLOT
plot(binomialModel2)
plot(distanceModel2)
gridExtra::grid.arrange(p, p2, p3, p4, ncol=2)
# Then I model to see if the trends I think I'm seeing are actually there
bin <- lm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade)
plot(bin)
?lm
bin
anova(bin)
# Then I model to see if the trends I think I'm seeing are actually there
bin <- lm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial)
bin
plot(bin)
anova(bin)
plot(bin)
boxplot(bin)
# Then I model to see if the trends I think I'm seeing are actually there
bin <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade, family = 'binomial')
bin
plot(bin)
anova(bin)
# Then I model to see if the trends I think I'm seeing are actually there
bin <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial, family = 'binomial')
bin
plot(bin)
anova(bin)
# Then I model to see if the trends I think I'm seeing are actually there
bin <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial, family = 'binomial')
bin2 <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial, family = 'binomial')
bin
plot(bin)
anova(bin, bin2)
bin2
bin
bin2
# Then I model to see if the trends I think I'm seeing are actually there
bin <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial, family = 'binomial')
bin2 <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade, family = 'binomial')
bin
bin2
anova(bin, bin2)
# Then I model to see if the trends I think I'm seeing are actually there
bin <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial, family = 'binomial')
bin2 <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade, family = 'binomial')
bin
bin2
plot(bin)
n2 <- 100
new.df <- data.frame(x1 = runif(n2, 0, 100), x2 = runif(n2,0,100))
# Predict the probabilities
# predict(model, new.df) will just give you the logit (z) values
# We want the probabilities so use the "response" type
probs <- predict(bin, new.df, "response")
# Draw some random values between 0 and 1
draws <- runif(n2)
# Check if draw value is less than threshold probability
results <- (draws < probs)
n2 <- 84
new.df <- data.frame(x1 = runif(n2, 0, 100), x2 = runif(n2,0,100))
# Predict the probabilities
# predict(model, new.df) will just give you the logit (z) values
# We want the probabilities so use the "response" type
probs <- predict(bin, new.df, "response")
# Draw some random values between 0 and 1
draws <- runif(n2)
# Check if draw value is less than threshold probability
results <- (draws < probs)
results
# Draw some random values between 0 and 1
draws <- runif(n2)
# Check if draw value is less than threshold probability
results <- (draws < probs)
results
bin2 <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade, family = 'binomial')
# Predict the probabilities
# predict(model, new.df) will just give you the logit (z) values
# We want the probabilities so use the "response" type
probs <- predict(bin2, new.df, "response")
# Draw some random values between 0 and 1
draws <- runif(n2)
# Check if draw value is less than threshold probability
results <- (draws < probs)
results
# Then I model to see if the trends I think I'm seeing are actually there
bin <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial, family = 'binomial')
bin2 <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade, family = 'binomial')
bin
bin2
?GLM
?glm
?base::glm
??glm
summary(bin2)
summary(bin)
# Then I model to see if the trends I think I'm seeing are actually there
bin <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial, family = 'binomial')
bin2 <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade, family = 'binomial')
bin3 <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$binomial, family = 'binomial')
summary(bin)
summary(bin2)
summary(bin3)
gridExtra::grid.arrange(p, p2, p3, p4, ncol=2)
dist <- glm(NHM_Pangolins$distance ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial, family = 'guassian')
dist <- glm(NHM_Pangolins$distance ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial)
dist2 <- glm(NHM_Pangolins$distance ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial)
dist3 <- (NHM_Pangolins$distance ~ NHM_Pangolins$binomial)
summary(dist)
dist2 <- glm(NHM_Pangolins$distance ~ NHM_Pangolins$Decade)
dist3 <- (NHM_Pangolins$distance ~ NHM_Pangolins$binomial)
summary(dist)
summary(dist2)
summary(dist3)
dist3 <- (NHM_Pangolins$distance ~ NHM_Pangolins$binomial)
summary(dist3)
dist3
summary(dist)
gridExtra::grid.arrange(p, p2, p3, p4, ncol=2)
?st_distance
gridExtra::grid.arrange(p, p2, p3, p4, ncol=2)
# Then I model to see if the trends I think I'm seeing are actually there
bin <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial, family = 'binomial')
bin2 <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$Decade, family = 'binomial')
bin3 <- glm(NHM_Pangolins$binomial_overlap ~ NHM_Pangolins$binomial, family = 'binomial')
summary(bin)
summary(bin2)
summary(bin3)
dist <- glm(NHM_Pangolins$distance ~ NHM_Pangolins$Decade + NHM_Pangolins$binomial)
dist2 <- glm(NHM_Pangolins$distance ~ NHM_Pangolins$Decade)
dist3 <- (NHM_Pangolins$distance ~ NHM_Pangolins$binomial)
summary(dist)
summary(dist2)
summary(dist3)
plot(dist)
boxplot(dist)
#
# binomialModel2 <- glmer(binomial_overlap ~ binomial + (1|Decade),
#                        data = NHM_Pangolins, family = 'binomial')
# distanceModel2 <- lmer(distance ~ binomial + (1|Decade),
#                        data = NHM_Pangolins)
#
# # And then we plot some these just to see
# # WILL BE USING GGPLOT FOR THIS BUT FOR STARTERS LETS JUST BASE PLOT
# plot(binomialModel2)
# plot(distanceModel2)
View(NHM_Pangolins)
mydata_release
sfe::mydata_release()
??sfe::mydata_release()
?sfe::mydata_release()
datastorr:::autogenerate(repo="JCur96/sfe", read="read.csv")
sfe::mydata_release(NHMPangolins.xlsx)
sfe::mydata_release('pangolin test' '../data/NHMPangolins.xlsx')
sfe::mydata_release('pangolin test', '../data/NHMPangolins.xlsx')
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins_hulls <- makeLandClippedHulls(NHM_Pangolins_hulls)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins_hulls, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins_hulls <- calculateOverlaps(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
NHM_Pangolins_hulls <- suppressWarnings(binomialOverlap(NHM_Pangolins_hulls))
View(NHM_Pangolins)
# All of the convex hulls overlap somewhat, so error might be due to that?
# head(NHM_Pangolins)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
NHM_Pangolins_hulls <- centroidEdgeDistance(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins_hulls <- makeLandClippedHulls(NHM_Pangolins_hulls)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins_hulls, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins_hulls <- calculateOverlaps(NHM_Pangolins_hulls, IUCN)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
source('~/.active-rstudio-document', echo=TRUE)
