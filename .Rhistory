NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
class(IUCN)
head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
head(NHM_Pangolins)
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins <- makeConvexHulls(NHM_Pangolins)
# And this function takes those hulls and clips them to landmasses
head(NHM_Pangolins)
NHM_Pangolins <- clipHullsToLand(NHM_Pangolins)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins <- makeLandClippedHulls(NHM_Pangolins)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
head(NHM_Pangolins)
str(NHM_Pangolins$Percent_overlap)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
?as.float
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
head(NHM_Pangolins)
View(NHM_Pangolins)
library(sfe)
devtools::load_all(".")
knit_with_parameters('~/Documents/RPackages/sfe/vignettes/my-vignette.Rmd')
library(sfe)
?devtools::install
devtools::use_vignette('my-vignette')
First I read in the data from both Natural History Museum(NHM) and the IUCN.
```{r}
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
First I read in the data from both Natural History Museum(NHM) and the IUCN.
```{r}
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
```
Then I wrangle the data. This involves changing a key column to
"binomial" as many of the functions to follow rely on the data having a column of
species names under the column header of "binomial". It also involves removing
spaces from between binomial names, and filtering out blank or NA values from
other key columns, as well as converting both data frames to the sf format,
making sure both are projected in latitude and longitude.
```{r}
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
```
Theres a lot of extra information in the IUCN data sets, but I won't filter that
out, depending on what you are doing different parts will be useful, and I cannot
devise an algorith to usefully sort that for every case.
I then filter both data sets to contain only species entries which occur in both
data sets. This function will reassign the IUCN data to the global environemnt
but with only matching species. I did this as a substitute for being able to
return two objects from a function in R.
```{r}
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
```
And can unify some naming conventions of Type, if the data has that information;
```{r}
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
```
Now that the data has been reduced to only usable records I can get into the meat
of the functions I've writte; adding error to point data and converting that data
into convex hulls.
First I need to change the Extent column into kilometers and rename it to reflect
that change. Then I can add a `buffer` to the point data using the point-radius
method.
```{r}
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
head(NHM_Pangolins)
```
At this point I thought it would be useful to explore the data visually, both
out of interest and to doube check that I really was converting point data into
point-radius data.
```{r}
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
```
Not all maps will seem to show anything interesting, but that is mostly due to
the scale of the maps versus the scale of the species ranges in some cases.
Correctly scaling the maps is quite difficult as I am dealing with global
distributions, whereas some range records seem to indicate a range of just a
handful of kilometers.
Some of these maps show range overlap, but what kind of percentage?
The next set of functions calculate percentage overlap between point-radius or
convex hull data, depending on whether the user has utilised the convex hull
generating functions yet or not.
```{r}
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
class(IUCN)
head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
head(NHM_Pangolins)
```
The above function will return the NHM data frame with a `Percent_overlap` column
added, the contents of which is calculated from the geometry column of the data.
The geometry column could either be point-radius or a fully realised convex hull,
which can be created and tailored using the following functions;
```{r}
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins <- makeConvexHulls(NHM_Pangolins)
# And this function takes those hulls and clips them to landmasses
head(NHM_Pangolins)
NHM_Pangolins <- clipHullsToLand(NHM_Pangolins)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins <- makeLandClippedHulls(NHM_Pangolins)
```
All of the above will give a percentage overlap with IUCN convex hulls, but for
analysis percentage is a tricky thing to work with, so I have created another
function to flatten the data to binomial (1 or 0) data, which makes modelling
with this data much easier.
The previous plotting code can be used again here to visulaise the results of
creating convex hulls. I would recommend creating a new folder for these unless
you dont mind overwriting the previous plots.
```{r}
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
```
Similarly I can calculate the percentage overlap between convex hulls and using
the `calculateOverlaps` function from earlier.
```{r}
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
head(NHM_Pangolins)
```
This function changes the `Percent_overlap` column to `binomial_overlap` as well
as flatten the data.
```{r}
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
head(NHM_Pangolins)
```
I have also created a function for calculating the distance between the centroid
of the NHM data and the edge of the IUCN data, as I feel that this distance might
be of interest with regards to analysis and modelling, and does not requrie any
flattening to use.
```{r}
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
head(NHM_Pangolins)
```
?knit
knit(input="readme.rmd", output = "readme.md")
knitr::knit(input="readme.rmd", output = "readme.md")
getwd()
knitr::knit(input="README.rmd", output = "readme.md")
knitr::knit(input="README.rmd", output = "readme.md")
knitr::knit(input="README.rmd", output = "readme.md")
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
# First it is advisable that you check if you've got the data already
sfe::mydata_versions()
# If not, you can check what versions are avaliable on GitHub
sfe::mydata_versions(local=F)
# From those you can choose a version you wish to work with
myFakePangolinData <- sfe::mydata(version = '0.0.1')
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
class(IUCN)
head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
head(NHM_Pangolins)
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins <- makeConvexHulls(NHM_Pangolins)
# And this function takes those hulls and clips them to landmasses
head(NHM_Pangolins)
NHM_Pangolins <- clipHullsToLand(NHM_Pangolins)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins <- makeLandClippedHulls(NHM_Pangolins)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
head(NHM_Pangolins)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
head(NHM_Pangolins)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
head(NHM_Pangolins)
# install.packages('lme4')
# install.packages('lmerTest')
library(lme4)
library(lmerTest)
binomialModel <- glmer(binomial_overlap ~ decade + (1|binomial),
data = NHM_Pangolins, family = 'binomial')
install.packages("gridExtra")
library(sfe)
library(rgeos)
library(rgdal)
# First I plot out the data to explore it.
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=binomial_overlap)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
library(ggplot2)
# First I plot out the data to explore it.
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=binomial_overlap)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins <- makeConvexHulls(NHM_Pangolins)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins <- clipHullsToLand(NHM_Pangolins)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins <- makeLandClippedHulls(NHM_Pangolins)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins, IUCN, path = '../output/convex_hull_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
library(sfe)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
# head(NHM_Pangolins)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
library(ggplot2)
# First I plot out the data to explore it.
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=binomial_overlap)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
p
p2 <- ggplot(NHM_Pangolins, aes(x=Decade, y=binomial_overlap)) +
geom_point()
p2
p3 <- ggplot(NHM_Pangolins, aes(x=binomial, y=distance)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
p3
p4 <- ggplot(NHM_Pangolins, aes(x=Decade, y=distance)) +
geom_point()
p4
gridExtra::grid.arrange(p, p2, p3, p4, ncol=2)
