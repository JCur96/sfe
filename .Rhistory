<<<<<<< HEAD
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
=======
# p
# p4 <- ggplot(NHM_Pangolins_hulls, aes(x=distance, y=Percent_overlap)) +
#   geom_point()
p5 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=distance)) +
geom_point() +
scale_x_discrete(labels = abbreviate)
# # p3
# p4 <- ggplot(NHM_Pangolins_hulls, aes(x=Decade, y=distance)) +
#   geom_point()
# # p4
gridExtra::grid.arrange(p, p2, p3, p4, ncol=2)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins_hulls <- makeLandClippedHulls(NHM_Pangolins_hulls)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins_hulls, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins_hulls <- calculateOverlaps(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
>>>>>>> 1a2c0b1e4754975983d72fe3b4bd576186b77806
NHM_Pangolins_hulls <- suppressWarnings(binomialOverlap(NHM_Pangolins_hulls))
# View(NHM_Pangolins)
# All of the convex hulls overlap somewhat, so error might be due to that?
# head(NHM_Pangolins)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
NHM_Pangolins_hulls <- centroidEdgeDistance(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
<<<<<<< HEAD
countNumbSpecimens <- function(x) {
for (var in unique(x$binomial)) {
length(var)
}
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
for (var in unique(x$binomial)) {
y <- length(var)
}
return(y)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
for (var in unique(x$binomial)) {
subsetOfDf <- x[x$binomial == var,]
y <- length(subsetOfDf)
}
return(y)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
subsetOfDf <- x[x$binomial == var,]
y <- length(subsetOfDf)
}
output <- rbind(output, y)
return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
subsetOfDf <- x[x$binomial == var,]
y <- length(subsetOfDf)
output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
View(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
subsetOfDf <- x[x$binomial == var,]
y <- length(subsetOfDf)
print(y)
output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
print(var)
subsetOfDf <- x[x$binomial == var,]
y <- length(subsetOfDf)
print(y)
output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
print(var)
subsetOfDf <- x[x$binomial == var,]
y <- length(var)
print(y)
output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
print(length(var))
# print(y)
# output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
print(length(subsetOfDf))
# print(y)
# output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
print(subsetOfDf)
# print(y)
# output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
?count
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
#print(subsetOfDf)
print(count(subsetOfDf$binomial))
# print(y)
# output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
#print(subsetOfDf)
print(length(subsetOfDf$binomial))
# print(y)
# output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
#print(subsetOfDf)
y <- (length(subsetOfDf$binomial))
print(y)
# output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
#print(subsetOfDf)
y <- (length(subsetOfDf$binomial))
print(y)
output <- rbind(output, y)
}
return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
#print(subsetOfDf)
x$numberOfSpecimens <- (length(subsetOfDf$binomial))
}
# return(output)
}
countNumbSpecimens(NHM_Pangolins)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
output <- c()
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
#print(subsetOfDf)
x$numberOfSpecimens <- (length(subsetOfDf$binomial))
}
return(x)
}
countNumbSpecimens(NHM_Pangolins)
countNumbOverlaps <- function(x) {
NHM_Pangolins['numberOfOverlaps'] <- NA
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
#print(subsetOfDf)
x$numberOfOverlaps <- (length(subsetOfDf$binomial_overlaps == 1))
}
return(x)
}
countNumbOverlaps(NHM_Pangolins)
NHM_Pangolins <- countNumbOverlaps(NHM_Pangolins)
View(NHM_Pangolins)
=======
NHM_Pangolins <- countNumbSpecimens(NHM_Pangolins)
NHM_Pangolins <- countNumbOverlaps(NHM_Pangolins)
myvars <- c('binomial', 'Percent_overlap', 'distance')
NHM_Pangolins_hulls <- NHM_Pangolins_hulls[myvars]
NHM_Pangolins_hulls <- unique(NHM_Pangolins_hulls)
View(NHM_Pangolins_hulls)
# probably dont need any of these, simple glms should do well
# install.packages('lme4')
# install.packages('lmerTest')
# library(lme4)
# library(lmerTest)
# First I plot out the data to explore it.
# change to percentage overlap for graphs, with response being number of overlaps/non-overlaps
# wrap decade in as.numeric()
# for convex hulls, make a new df of by species, and can do binomial model on that with
# and use percentage overlap as response
# can do point graph
# STOP WRITING UTILISE
# make bullet pointed lists before I start writing
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=Percent_overlap)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
# p
p2 <- ggplot(NHM_Pangolins, aes(x=as.numeric(Decade), y=Percent_overlap)) +
geom_point()
# p2
p3 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=Percent_overlap)) +
geom_point() +
scale_x_discrete(labels = abbreviate)
# p
# p4 <- ggplot(NHM_Pangolins_hulls, aes(x=distance, y=Percent_overlap)) +
#   geom_point()
p5 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=distance)) +
geom_point() +
scale_x_discrete(labels = abbreviate)
# # p3
# p4 <- ggplot(NHM_Pangolins_hulls, aes(x=Decade, y=distance)) +
#   geom_point()
# # p4
gridExtra::grid.arrange(p, p2, p3, p4, ncol=2)
# First I plot out the data to explore it.
# change to percentage overlap for graphs, with response being number of overlaps/non-overlaps
# wrap decade in as.numeric()
# for convex hulls, make a new df of by species, and can do binomial model on that with
# and use percentage overlap as response
# can do point graph
# STOP WRITING UTILISE
# make bullet pointed lists before I start writing
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=Percent_overlap)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
# p
p2 <- ggplot(NHM_Pangolins, aes(x=as.numeric(Decade), y=Percent_overlap)) +
geom_point()
# p2
p3 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=Percent_overlap)) +
geom_point() +
scale_x_discrete(labels = abbreviate)
# p
# p4 <- ggplot(NHM_Pangolins_hulls, aes(x=distance, y=Percent_overlap)) +
#   geom_point()
p5 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=distance)) +
geom_point() +
scale_x_discrete(labels = abbreviate)
# # p3
# p4 <- ggplot(NHM_Pangolins_hulls, aes(x=Decade, y=distance)) +
#   geom_point()
# # p4
gridExtra::grid.arrange(p, p2, p3, p5, ncol=2)
hullModel <- glm(Percent_overlap ~ binomial, data = NHM_Pangolins_hulls,
family = 'binomial')
hullModel <- glm(Percent_overlap ~ binomial, data = NHM_Pangolins_hulls,
family = 'gaussian')
plot(hullModel)
p6 <- ggplot(NHM_Pangolins, aes(x=Percent_overlap, y=numberOfOverlaps)) +
geom_boxplot()
p6 <- ggplot(NHM_Pangolins, aes(x=Percent_overlap, y=numberOfOverlaps)) +
geom_boxplot()
p6
p6 <- ggplot(NHM_Pangolins, aes(group = binomial, x=Percent_overlap, y=numberOfOverlaps)) +
geom_boxplot()
p6
hullModel <- glm(Percent_overlap ~ binomial, data = NHM_Pangolins_hulls,
family = 'poisson')
plot(hullModel)
hullModel2 <- glm(distance ~ binomial, data = NHM_Pangolins_hulls)
plot(hullModel2)
hullModel <- glm(Percent_overlap ~ binomial, data = NHM_Pangolins_hulls,
family = 'binomial')
hullModel <- glm(as.numeric(Percent_overlap) ~ binomial, data = NHM_Pangolins_hulls,
family = 'binomial')
class(NHM_Pangolins_hulls$binomial)
class(NHM_Pangolins_hulls$Percent_overlap)
hullModel <- glm(as.numeric(Percent_overlap) ~ as.factor(binomial), data = NHM_Pangolins_hulls,
family = 'binomial')
class(as.factor(NHM_Pangolins_hulls$binomial))
hullModel <- glm(as.numeric(Percent_overlap) ~ as.factor(binomial), data = NHM_Pangolins_hulls,
family = 'binomial')
NHM_Pangolins_hulls$binomial <- as.factor(NHM_Pangolins_hulls$binomial)
hullModel <- glm(as.numeric(Percent_overlap) ~ as.factor(binomial), data = NHM_Pangolins_hulls,
family = 'binomial')
class(NHM_Pangolins_hulls$binomial)
View(NHM_Pangolins_hulls)
test2 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Continent, data = NHM_Pangolins, family = 'binomial')
plot(test2)
sum_model2 <- summary(test2)
sum_model2$deviance / sum_model2$df.resid
test2 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Continent, data = NHM_Pangolins, family = 'quasibinomial')
plot(test2)
sum_model2 <- summary(test2)
sum_model2$deviance / sum_model2$df.resid
tidy(anova(test2, test = "F"))
anova(test2, test = "F")
summary(test2)
# Then I model to see if the trends I think I'm seeing are actually there
# does not converge
test <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
binomial, data=NHM_Pangolins, family = 'quasibinomial')
# Then I model to see if the trends I think I'm seeing are actually there
# does not converge
tmp <- cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps))
# Then I model to see if the trends I think I'm seeing are actually there
# does not converge
tmp <- cbind(NHM_Pangolins$numberOfOverlaps, (NHM_Pangolins$numberOfSpecimens - NHM_Pangolins$numberOfOverlaps))
tmp
hullmodel3  <- glm(Percent_overlap ~ Continent, data = NHM_Pangolins_hulls,
family = 'binomial')
myvars <- c('binomial', 'Continent', 'Percent_overlap', 'distance')
>>>>>>> 1a2c0b1e4754975983d72fe3b4bd576186b77806
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins_hulls <- makeLandClippedHulls(NHM_Pangolins_hulls)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins_hulls, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins_hulls <- calculateOverlaps(NHM_Pangolins_hulls, IUCN)
<<<<<<< HEAD
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins_hulls <- suppressWarnings(binomialOverlap(NHM_Pangolins_hulls))
# View(NHM_Pangolins)
# All of the convex hulls overlap somewhat, so error might be due to that?
# head(NHM_Pangolins)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
NHM_Pangolins_hulls <- centroidEdgeDistance(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
NHM_Pangolins_hulls <- suppressWarnings(binomialOverlap(NHM_Pangolins_hulls))
View(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
View(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(rgeos)
library(rgdal)
View(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
View(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
=======
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
NHM_Pangolins_hulls <- suppressWarnings(binomialOverlap(NHM_Pangolins_hulls))
# View(NHM_Pangolins)
# All of the convex hulls overlap somewhat, so error might be due to that?
# head(NHM_Pangolins)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
NHM_Pangolins_hulls <- centroidEdgeDistance(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins <- countNumbSpecimens(NHM_Pangolins)
NHM_Pangolins <- countNumbOverlaps(NHM_Pangolins)
myvars <- c('binomial', 'Continent', 'Percent_overlap', 'distance')
NHM_Pangolins_hulls <- NHM_Pangolins_hulls[myvars]
NHM_Pangolins_hulls <- unique(NHM_Pangolins_hulls)
# probably dont need any of these, simple glms should do well
# install.packages('lme4')
# install.packages('lmerTest')
# library(lme4)
# library(lmerTest)
# First I plot out the data to explore it.
# change to percentage overlap for graphs, with response being number of overlaps/non-overlaps
# wrap decade in as.numeric()
# for convex hulls, make a new df of by species, and can do binomial model on that with
# and use percentage overlap as response
# can do point graph
# STOP WRITING UTILISE
# make bullet pointed lists before I start writing
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=Percent_overlap)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
# p
p2 <- ggplot(NHM_Pangolins, aes(x=as.numeric(Decade), y=Percent_overlap)) +
geom_point()
# p2
p3 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=Percent_overlap)) +
geom_point() +
scale_x_discrete(labels = abbreviate)
# p
# p4 <- ggplot(NHM_Pangolins_hulls, aes(x=distance, y=Percent_overlap)) +
#   geom_point()
p5 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=distance)) +
geom_point() +
scale_x_discrete(labels = abbreviate)
p6 <- ggplot(NHM_Pangolins, aes(group = binomial, x=Percent_overlap, y=numberOfOverlaps)) +
geom_boxplot()
p6
# # p3
# p4 <- ggplot(NHM_Pangolins_hulls, aes(x=Decade, y=distance)) +
#   geom_point()
# # p4
gridExtra::grid.arrange(p, p2, p3, p5, ncol=2)
# Then I model to see if the trends I think I'm seeing are actually there
# does not converge
test <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
binomial, data=NHM_Pangolins, family = 'binomial')
# probably massively overdispersed
test1 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Decade, data = NHM_Pangolins, family = 'quasibinomial')
# Check for overdispersion (should be < 2)
sum_model1 <- summary(test1)
sum_model1$deviance / sum_model1$df.resid
plot(test1)
anova(test1, test = "F")
summary(test1)
# could do third model, numbOverlaps as fun of continent
test2 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Continent, data = NHM_Pangolins, family = 'binomial')
plot(test2)
sum_model2 <- summary(test2)
sum_model2$deviance / sum_model2$df.resid
anova(test2, test = "F")
summary(test2)
# Hulls dont appear to be working and I'm struggling to troubleshoot those
class(NHM_Pangolins_hulls$binomial)
class(NHM_Pangolins_hulls$Percent_overlap)
NHM_Pangolins_hulls$binomial <- as.factor(NHM_Pangolins_hulls$binomial)
View(NHM_Pangolins_hulls)
# similarly could do third model here for continent, percentage overlap or distance
hullModel <- glm(Percent_overlap ~ binomial, data = NHM_Pangolins_hulls,
family = 'binomial')
hullModel2 <- glm(distance ~ binomial, data = NHM_Pangolins_hulls)
hullmodel3  <- glm(Percent_overlap ~ Continent, data = NHM_Pangolins_hulls,
family = 'binomial')
plot(hullModel2)
# Then I model to see if the trends I think I'm seeing are actually there
# does not converge
test <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
binomial, data=NHM_Pangolins, family = 'binomial')
# probably massively overdispersed
test1 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Decade, data = NHM_Pangolins, family = 'quasibinomial')
# Check for overdispersion (should be < 2)
sum_model1 <- summary(test1)
sum_model1$deviance / sum_model1$df.resid
anova(test1, test = "F")
summary(test1)
# could do third model, numbOverlaps as fun of continent
test2 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Continent, data = NHM_Pangolins, family = 'binomial')
sum_model2 <- summary(test2)
sum_model2$deviance / sum_model2$df.resid
anova(test2, test = "F")
summary(test2)
# NHM_Pangolins_hulls$binomial <- as.factor(NHM_Pangolins_hulls$binomial)
# View(NHM_Pangolins_hulls)
# similarly could do third model here for continent, percentage overlap or distance
hullModel <- glm(Percent_overlap ~ binomial, data = NHM_Pangolins_hulls,
family = 'binomial')
hullModel2 <- glm(distance ~ binomial, data = NHM_Pangolins_hulls)
# NHM_Pangolins_hulls$binomial <- as.factor(NHM_Pangolins_hulls$binomial)
# View(NHM_Pangolins_hulls)
# similarly could do third model here for continent, percentage overlap or distance
hullModel <- glm(Percent_overlap ~ binomial, data = NHM_Pangolins_hulls,
family = 'binomial')
hullModel2 <- glm(distance ~ binomial, data = NHM_Pangolins_hulls)
sum_model2 <- summary(hullModel2)
sum_model2$deviance / sum_model2$df.resid
anova(hullModel2, test = "F")
hullModel2 <- glm(distance ~ binomial, data = NHM_Pangolins_hulls,
family = 'binomial')
hullModel2 <- glm(distance ~ binomial, data = NHM_Pangolins_hulls,
family = 'poisson')
hullModel2 <- glm(distance ~ binomial, data = NHM_Pangolins_hulls,
family = 'gaussian')
sum_model2 <- summary(hullModel2)
sum_model2$deviance / sum_model2$df.resid
anova(hullModel2, test = "F")
summary(hullModel2)
hullmodel3  <- glm(Percent_overlap ~ Continent, data = NHM_Pangolins_hulls,
family = 'binomial')
hullmodel3  <- glm(Percent_overlap ~ Continent, data = NHM_Pangolins_hulls,
family = 'quasibinomial')
hullmodel3  <- glm(Percent_overlap ~ as.factor(Continent), data = NHM_Pangolins_hulls,
family = 'quasibinomial')
hullmodel3  <- glm(Percent_overlap ~ as.factor(Continent), data = NHM_Pangolins_hulls,
family = 'quasibinomial')
hullmodel3  <- lm(Percent_overlap ~ as.factor(Continent), data = NHM_Pangolins_hulls,
family = 'quasibinomial')
sum_model3 <- summary(hullmodel3)
sum_model3$deviance / sum_model3$df.resid
anova(hullmodel3, test = "F")
summary(test2)
# NHM_Pangolins_hulls$binomial <- as.factor(NHM_Pangolins_hulls$binomial)
# View(NHM_Pangolins_hulls)
# similarly could do third model here for continent, percentage overlap or distance
hullModel <- glm(Percent_overlap ~ binomial, data = NHM_Pangolins_hulls,
family = 'binomial')
# NHM_Pangolins_hulls$binomial <- as.factor(NHM_Pangolins_hulls$binomial)
# View(NHM_Pangolins_hulls)
# similarly could do third model here for continent, percentage overlap or distance
hullModel <- glm(Percent_overlap ~ as.factor(binomial), data = NHM_Pangolins_hulls,
family = 'binomial')
# NHM_Pangolins_hulls$binomial <- as.factor(NHM_Pangolins_hulls$binomial)
# View(NHM_Pangolins_hulls)
# similarly could do third model here for continent, percentage overlap or distance
hullModel <- glm(Percent_overlap ~ as.factor(binomial), data = NHM_Pangolins_hulls,
family = 'binomial')
# Hulls dont appear to be working and I'm struggling to troubleshoot those
# class(NHM_Pangolins_hulls$binomial)
class(NHM_Pangolins_hulls$Percent_overlap)
# Hulls dont appear to be working and I'm struggling to troubleshoot those
class(NHM_Pangolins_hulls$binomial)
>>>>>>> 1a2c0b1e4754975983d72fe3b4bd576186b77806
