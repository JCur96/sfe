# as it otherwise returns a list of length zero,
# which cannot be appended to a df
overlap <- c(0)
}
overlap <- as.list(overlap)
# returns the result, so can be passed to another fun
return(overlap)
}
overlaps(egForPlot, IUCNForPlot)
View(egForPlot)
View(IUCNForPlot)
# Might need to unify all the IUCN geometries to get this to work
# thought I had solved this problem before tho
View(IUCN)
?sf::st_union
for (var in unique(IUCN$binomial)) {
IUCN_var <- IUCN[IUCN$binomial == var,]
st_combine(IUCN_var$geometry)
}
View(IUCN)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
}
output <- rbind(y, output)
return(y)
}
resolveIUCNGeom(IUCNForPlot)
View(IUCNForPlot)
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii' & 'Phataginus_tricuspis')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii' & binomial == 'Phataginus_tricuspis')
resolveIUCNGeom(IUCNForPlot)
# Might need to unify all the IUCN geometries to get this to work
# thought I had solved this problem before tho
View(IUCN)
View(NHM_Pangolins)
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii' & binomial == 'Phataginus_tricuspis')
View(egForPlot)
View(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
print(y)
}
output <- rbind(y, output)
return(y)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
print(y)
}
output <- rbind(y, output)
return(y)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print(IUCN_var)
y <- st_combine(IUCN_var$geometry)
print(y)
}
output <- rbind(y, output)
return(y)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print(IUCN_var)
y <- st_combine(IUCN_var$geometry)
print(y)
}
output <- rbind(y, output)
return(output)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print(IUCN_var)
y <- st_combine(IUCN_var$geometry)
print(y)
}
output <- rbind(y, output)
return(output)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print(IUCN_var)
y <- st_combine(IUCN_var$geometry)
# print(y)
}
output <- rbind(y, output)
return(output)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print(IUCN_var)
#y <- st_combine(IUCN_var$geometry)
# print(y)
}
output <- rbind(y, output)
return(output)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print(IUCN_var)
#y <- st_combine(IUCN_var$geometry)
# print(y)
}
#output <- rbind(y, output)
return(output)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print(IUCN_var)
}
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print(var)
print(IUCN_var)
}
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print('Hello')
print(IUCN_var)
}
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
print('Hi')
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
print('Hello')
print(IUCN_var)
}
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
}
}
resolveIUCNGeom(IUCNForPlot)
View(IUCNForPlot)
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii' & binomial == 'Phataginus_tricuspis')
resolveIUCNGeom(IUCNForPlot)
View(IUCNForPlot)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii' & binomial == 'Phataginus_tricuspis')
View(IUCNForPlot)
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
View(egForPlot)
View(IUCNForPlot)
# Might need to unify all the IUCN geometries to get this to work
# thought I had solved this problem before tho
View(IUCN)
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii' & binomial == 'Smutsia_gigantea')
View(IUCNForPlot)
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_gigantea')
View(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
}
}
resolveIUCNGeom(IUCNForPlot)
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_gigantea' & binomial == 'Smutsia_temminckii')
View(IUCNForPlot)
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_gigantea' && binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_gigantea' && binomial == 'Smutsia_temminckii')
View(IUCNForPlot)
IUCNForPlot <- IUCN %>% filter(nrow(1:10))
View(IUCNForPlot)
IUCNForPlot <- IUCN %>% select(nrow(1:10))
View(IUCNForPlot)
IUCNForPlot <- IUCN[IUCN,10]
View(IUCNForPlot)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
IUCNForPlot <- IUCN[IUCN,10]
View(IUCNForPlot)
IUCNForPlot <- IUCN[1:10,]
View(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
}
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
IUCN_var <- x[x$binomial == var,]
print(IUCN_var)
}
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
IUCN_var <- x[x$binomial == var,]
print(IUCN_var)
y <- st_combine(IUCN_var$geometry)
}
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
}
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
print(y)
}
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
}
output <- rbind(y, output)
print(output)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
}
output <- rbind(y, output)
print(output)
return(output)
}
resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
}
output <- rbind(y, output)
return(output)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
View(TestOut)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
print(var)
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
}
output <- rbind(y, output)
output <- as.data.frame(output)
return(output)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
View(TestOut)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
output <- rbind(y, output)
}
#output <- rbind(y, output)
#output <- as.data.frame(output)
return(output)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
View(TestOut)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
output <- rbind(y, output)
}
#output <- rbind(y, output)
output <- as.data.frame(output)
return(output)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
View(TestOut)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_union(IUCN_var$geometry)
output <- rbind(y, output)
}
#output <- rbind(y, output)
output <- as.data.frame(output)
return(output)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
View(TestOut)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
st_union(IUCN_var$geometry)
#output <- rbind(y, output)
}
#output <- rbind(y, output)
#output <- as.data.frame(output)
return(output)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
View(TestOut)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_union(IUCN_var$geometry, IUCN_var$geometry)
#output <- rbind(y, output)
}
#output <- rbind(y, output)
#output <- as.data.frame(output)
return(output)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
View(TestOut)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_union(IUCN_var$geometry, IUCN_var$geometry)
#output <- rbind(y, output)
}
output <- rbind(y, output)
output <- as.data.frame(output)
return(output)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
View(TestOut)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
print(y)
#output <- rbind(y, output)
}
output <- rbind(y, output)
output <- as.data.frame(output)
return(output)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
resolveIUCNGeom <- function(x) {
output <- c()
for (var in unique(x$binomial)) {
IUCN_var <- x[x$binomial == var,]
y <- st_combine(IUCN_var$geometry)
print(y)
#output <- rbind(y, output)
}
#output <- rbind(y, output)
#output <- as.data.frame(output)
return(y)
}
TestOut <- resolveIUCNGeom(IUCNForPlot)
View(TestOut)
