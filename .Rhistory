# STOP WRITING UTILISE
# make bullet pointed lists before I start writing
# Think that as of 12:50 on 25/07/19 these are my for graphs for results data vis
# now just need to convert NHM_Pangolins_hulls into a table minus geom and that is
# a results section
# need to get the scaling better and make the axis titles pretty plus inc panel labells
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=Percent_overlap)) +
geom_boxplot()+
scale_x_discrete(labels = abbreviate) +
xlab('Binomial Name') +
ylab('Percentage Overlap') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45))
# (margin = margin(t = 0, r = 20, b = 20, l = 0)))
p1 <- ggplot(NHM_Pangolins, aes(x=as.numeric(Decade), y=Percent_overlap)) +
geom_point()+
xlab('Decade of Collection') +
ylab('Percentage Overlap') +
theme_bw()
p2 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=distance)) +
geom_point() +
scale_x_discrete(labels = abbreviate)+
xlab('Binomial Name') +
ylab('Centroid-Centroid Distance (km)') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45))
p3 <- ggplot(NHM_Pangolins_hulls, aes(x=Continent, y=Percent_overlap)) +
geom_boxplot()+
xlab('Continent') +
ylab('Percentage Overlap') +
theme_bw()
# p4 <- ggplot(NHM_Pangolins, aes(x=Continent, y=Percent_overlap)) +
#   geom_boxplot()
# p4
# p5 <- ggplot(NHM_Pangolins, aes(group = binomial, x=Continent, y=numberOfOverlaps)) +
#   geom_point()
# p5
dataPlots <- gridExtra::grid.arrange(p, p1, p2, p3, ncol=2)
ggsave(filename = '../output/dataPlots.png', plot = dataPlots, device = 'png')
# Then I model to see if the trends I think I'm seeing are actually there
# This model doesn't converge, but thats fine.
model <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
binomial, data=NHM_Pangolins, family = 'binomial')
# This one does converge, but is not significant
model1 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Decade, data = NHM_Pangolins, family = 'binomial')
# Check for overdispersion (should be < 2)
sum_model1 <- summary(model1)
sum_model1$deviance / sum_model1$df.resid
# plot(model1)
anova(model1, test = "Chisq")
summary(model1)
# This model is significant, with continent significantly predicting the number
# of overlaps, with asia having more(?)
model2 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Continent, data = NHM_Pangolins, family = 'binomial')
# plot(model2)
sum_model2 <- summary(model2)
sum_model2$deviance / sum_model2$df.resid
anova(model2, test = "Chisq")
summary(model2)
# for hulls, just make a table with that information in
# it, or a world map showing overlaps or the like. Also add the exploratory graphs
# perhaps as those are interesting.
NHM_Pangolins_hulls <- st_drop_geometry(NHM_Pangolins_hulls)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# ggsave('../output/plot1', p, 'png')
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
# NHM_Pangolins_hulls <- makeLandClippedHulls(NHM_Pangolins_hulls)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# ggsave('../output/plot2', p, 'png')
plotMaps(NHM_Pangolins_hulls, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins_hulls <- calculateOverlaps(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
NHM_Pangolins_hulls <- suppressWarnings(binomialOverlap(NHM_Pangolins_hulls))
# View(NHM_Pangolins)
# All of the convex hulls overlap somewhat, so error might be due to that?
# head(NHM_Pangolins)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
NHM_Pangolins_hulls <- centroidEdgeDistance(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins <- countNumbSpecimens(NHM_Pangolins)
NHM_Pangolins <- countNumbOverlaps(NHM_Pangolins)
# myvars <- c('binomial', 'Continent', 'Percent_overlap', 'distance')
# class(NHM_Pangolins_hulls$Continent)
# NHM_Pangolins_hulls$Continent <- as.character(NHM_Pangolins_hulls$Continent)
myvars <- c('binomial', 'Percent_overlap', 'distance')
NHM_Pangolins_hulls <- NHM_Pangolins_hulls[myvars]
NHM_Pangolins_hulls <- unique(NHM_Pangolins_hulls)
myvars <- c('binomial', 'Continent')
tmp <- NHM_Pangolins[myvars]
tmp <- st_drop_geometry(tmp)
tmp <- unique(tmp)
# View(tmp)
NHM_Pangolins_hulls <- merge(NHM_Pangolins_hulls, tmp, by = 'binomial')
# View(NHM_Pangolins_hulls)
# probably dont need any of these, simple glms should do well
# install.packages('lme4')
# install.packages('lmerTest')
# library(lme4)
# library(lmerTest)
# First I plot out the data to explore it.
# change to percentage overlap for graphs, with response being number of overlaps/non-overlaps
# wrap decade in as.numeric()
# for convex hulls, make a new df of by species, and can do binomial model on that with
# and use percentage overlap as response
# can do point graph
# STOP WRITING UTILISE
# make bullet pointed lists before I start writing
# Think that as of 12:50 on 25/07/19 these are my for graphs for results data vis
# now just need to convert NHM_Pangolins_hulls into a table minus geom and that is
# a results section
# need to get the scaling better and make the axis titles pretty plus inc panel labells
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=Percent_overlap)) +
geom_boxplot() +
scale_x_discrete(labels = abbreviate)
p1 <- ggplot(NHM_Pangolins, aes(x=as.numeric(Decade), y=Percent_overlap)) +
geom_point()
p2 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=distance)) +
geom_point() +
scale_x_discrete(labels = abbreviate)
p3 <- ggplot(NHM_Pangolins_hulls, aes(x=Continent, y=Percent_overlap)) +
geom_boxplot()
p4 <- ggplot(NHM_Pangolins, aes(x=Continent, y=Percent_overlap)) +
geom_boxplot()
p4
p5 <- ggplot(NHM_Pangolins, aes(group = binomial, x=Continent, y=numberOfOverlaps)) +
geom_point()
p5
dataPlots <- gridExtra::grid.arrange(p, p1, p2, p3, ncol=2)
ggsave(filename = '../output/dataPlots', plot = dataPlots, device = 'png')
# Then I model to see if the trends I think I'm seeing are actually there
# This model doesn't converge, but thats fine.
model <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
binomial, data=NHM_Pangolins, family = 'binomial')
# This one does converge, but is not significant
model1 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Decade, data = NHM_Pangolins, family = 'binomial')
# Check for overdispersion (should be < 2)
sum_model1 <- summary(model1)
sum_model1$deviance / sum_model1$df.resid
# plot(model1)
anova(model1, test = "F")
summary(model1)
# This model is significant, with continent significantly predicting the number
# of overlaps, with asia having more(?)
model2 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Continent, data = NHM_Pangolins, family = 'binomial')
# plot(model2)
sum_model2 <- summary(model2)
sum_model2$deviance / sum_model2$df.resid
anova(model2, test = "F")
summary(model2)
# for hulls, just make a table with that information in
# it, or a world map showing overlaps or the like. Also add the exploratory graphs
# perhaps as those are interesting.
NHM_Pangolins_hulls <- st_drop_geometry(NHM_Pangolins_hulls)
write.table(NHM_Pangolins_hulls, file = '../output/convexHulls')
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
# Here I make a plot to demonstrate how the NHM has been using georeferenced
# specimens
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T) +
theme_bw()
print(p)
ggsave('../output/previous_work.png', p, 'png')
# I then add error to the plot
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)  +
theme_bw()
print(p)
ggsave('../output/point_radius_demo.png', p, 'png')
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
# NHM_Pangolins_hulls <- makeLandClippedHulls(NHM_Pangolins_hulls)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T) +
theme_bw()
print(p)
ggsave('../output/convex_hull_demo.png', p, 'png')
plotMaps(NHM_Pangolins_hulls, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins_hulls <- calculateOverlaps(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
NHM_Pangolins_hulls <- suppressWarnings(binomialOverlap(NHM_Pangolins_hulls))
# View(NHM_Pangolins)
# All of the convex hulls overlap somewhat, so error might be due to that?
# head(NHM_Pangolins)
NHM_Pangolins <- centroidCentroidDistance(NHM_Pangolins, IUCN)
# NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
NHM_Pangolins_hulls <- centroidCentroidDistance(NHM_Pangolins_hulls, IUCN)
# NHM_Pangolins_hulls <- centroidEdgeDistance(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
egForPlot <- st_transform(egForPlot$geometry, 2163)
IUCNForPlot <- st_transform(IUCNForPlot$geometry, 2163)
egForPlotCentroid <- st_centroid(egForPlot)
IUCNForPlotCentroid <- st_centroid(IUCNForPlot)
egForPlotCentroid <- st_transform(egForPlotCentroid, 4326)
IUCNForPlotCentroid <- st_transform(IUCNForPlotCentroid, 4326)
egForPlot <- st_transform(egForPlot, 4326)
IUCNForPlot <- st_transform(IUCNForPlot, 4326)
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
landMap <- st_transform(landMap, 4326)
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 1, fill='blue'), data = egForPlotCentroid , show.legend = F) +
geom_sf(mapping = aes(alpha = 1, fill='red'), data = IUCNForPlotCentroid , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.5, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T) +
theme_bw()
print(p)
ggsave('../output/centroid_distance_demo.png', p, 'png')
NHM_Pangolins <- countNumbSpecimens(NHM_Pangolins)
NHM_Pangolins <- countNumbOverlaps(NHM_Pangolins)
# myvars <- c('binomial', 'Continent', 'Percent_overlap', 'distance')
# class(NHM_Pangolins_hulls$Continent)
# NHM_Pangolins_hulls$Continent <- as.character(NHM_Pangolins_hulls$Continent)
myvars <- c('binomial', 'Percent_overlap', 'distance')
NHM_Pangolins_hulls <- NHM_Pangolins_hulls[myvars]
NHM_Pangolins_hulls <- unique(NHM_Pangolins_hulls)
myvars <- c('binomial', 'Continent')
tmp <- NHM_Pangolins[myvars]
tmp <- st_drop_geometry(tmp)
tmp <- unique(tmp)
# View(tmp)
NHM_Pangolins_hulls <- merge(NHM_Pangolins_hulls, tmp, by = 'binomial')
# View(NHM_Pangolins_hulls)
# probably dont need any of these, simple glms should do well
# install.packages('lme4')
# install.packages('lmerTest')
# library(lme4)
# library(lmerTest)
# First I plot out the data to explore it.
# change to percentage overlap for graphs, with response being number of overlaps/non-overlaps
# wrap decade in as.numeric()
# for convex hulls, make a new df of by species, and can do binomial model on that with
# and use percentage overlap as response
# can do point graph
# STOP WRITING UTILISE
# make bullet pointed lists before I start writing
# Think that as of 12:50 on 25/07/19 these are my for graphs for results data vis
# now just need to convert NHM_Pangolins_hulls into a table minus geom and that is
# a results section
# need to get the scaling better and make the axis titles pretty plus inc panel labells
p <- ggplot(NHM_Pangolins, aes(x=binomial, y=Percent_overlap)) +
geom_boxplot()+
scale_x_discrete(labels = abbreviate) +
xlab('Binomial Name') +
ylab('Percentage Overlap') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45))
# (margin = margin(t = 0, r = 20, b = 20, l = 0)))
p1 <- ggplot(NHM_Pangolins, aes(x=as.numeric(Decade), y=Percent_overlap)) +
geom_point()+
xlab('Decade of Collection') +
ylab('Percentage Overlap') +
theme_bw()
p2 <- ggplot(NHM_Pangolins_hulls, aes(x=binomial, y=distance)) +
geom_point() +
scale_x_discrete(labels = abbreviate)+
xlab('Binomial Name') +
ylab('Centroid-Centroid Distance (km)') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45))
p3 <- ggplot(NHM_Pangolins_hulls, aes(x=Continent, y=Percent_overlap)) +
geom_boxplot()+
xlab('Continent') +
ylab('Percentage Overlap') +
theme_bw()
# p4 <- ggplot(NHM_Pangolins, aes(x=Continent, y=Percent_overlap)) +
#   geom_boxplot()
# p4
# p5 <- ggplot(NHM_Pangolins, aes(group = binomial, x=Continent, y=numberOfOverlaps)) +
#   geom_point()
# p5
dataPlots <- gridExtra::grid.arrange(p, p1, p2, p3, ncol=2)
ggsave(filename = '../output/dataPlots.png', plot = dataPlots, device = 'png')
# Then I model to see if the trends I think I'm seeing are actually there
# This model doesn't converge, but thats fine.
model <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
binomial, data=NHM_Pangolins, family = 'binomial')
# This one does converge, but is not significant
model1 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Decade, data = NHM_Pangolins, family = 'binomial')
# Check for overdispersion (should be < 2)
sum_model1 <- summary(model1)
sum_model1$deviance / sum_model1$df.resid
# plot(model1)
anova(model1, test = "Chisq")
summary(model1)
# This model is significant, with continent significantly predicting the number
# of overlaps, with asia having more(?)
model2 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Continent, data = NHM_Pangolins, family = 'binomial')
# plot(model2)
sum_model2 <- summary(model2)
sum_model2$deviance / sum_model2$df.resid
anova(model2, test = "Chisq")
summary(model2)
# for hulls, just make a table with that information in
# it, or a world map showing overlaps or the like. Also add the exploratory graphs
# perhaps as those are interesting.
NHM_Pangolins_hulls <- st_drop_geometry(NHM_Pangolins_hulls)
summary(model1)
# This model is significant, with continent significantly predicting the number
# of overlaps, with asia having more(?)
model2 <- glm(cbind(numberOfOverlaps, (numberOfSpecimens - numberOfOverlaps)) ~
Continent, data = NHM_Pangolins, family = 'binomial')
summary(model2)
cite
citation()
?st_convex_hull
NHM_Pangolins_hulls <- st_drop_geometry(NHM_Pangolins_hulls)
