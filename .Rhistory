library(rgeos)
library(rgdal)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins_hulls <- makeLandClippedHulls(NHM_Pangolins_hulls)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins_hulls, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins_hulls <- calculateOverlaps(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
# NHM_Pangolins <- suppressWarnings(binomialOverlap(NHM_Pangolins))
# NHM_Pangolins <- suppressWarnings(modifiedBinomialOverlap(NHM_Pangolins))
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
NHM_Pangolins_hulls <- suppressWarnings(binomialOverlap(NHM_Pangolins_hulls))
View(NHM_Pangolins)
# All of the convex hulls overlap somewhat, so error might be due to that?
# head(NHM_Pangolins)
NHM_Pangolins <- centroidEdgeDistance(NHM_Pangolins, IUCN)
NHM_Pangolins_hulls <- centroidEdgeDistance(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins_hulls <- makeLandClippedHulls(NHM_Pangolins_hulls)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins_hulls, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins_hulls <- calculateOverlaps(NHM_Pangolins_hulls, IUCN)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
source('~/.active-rstudio-document', echo=TRUE)
library(sfe)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
#If you know you want hulls which are clipped to landmasses from the start you
# can use the following function
NHM_Pangolins_hulls <- makeLandClippedHulls(NHM_Pangolins_hulls)
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins_hulls %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
plotMaps(NHM_Pangolins_hulls, IUCN, path = '../output/convex_hull_graphs/')
NHM_Pangolins_hulls <- calculateOverlaps(NHM_Pangolins_hulls, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
knitr::opts_chunk$set(
error = TRUE,
collapse = TRUE,
comment = "#>"
)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
# # First it is advisable that you check if you've got the data already
# sfe::mydata_versions()
# # If not, you can check what versions are avaliable on GitHub
# sfe::mydata_versions(local=F)
# # From those you can choose a version you wish to work with
# myFakePangolinData <- sfe::mydata(version = '0.0.1')
# # Once you've made any edits to the data you can upload it to version control
# sfe::updateVersion()
# # UpdateVersion helps you update the description file before you make a new release
# sfe::mydata_release()
NHM_Pangolins <- read.csv("../data/NHMPangolins - in.csv", header=T)
IUCN <- inReadOld(path = '../data', name = 'maps_pholidota')
NHM_Pangolins <- prepNHMData(NHM_Pangolins, 6)
# To prove that this has done what we want, we can view the first ten rows
# head(NHM_Pangolins)
# So it's not quite ready yet as it still contains a lot of missing values.
# Filtering out records which don't have a decade should help.
# We also don't really need all the notes at the moment, so we can drop that column
NHM_Pangolins <- NHM_Pangolins %>% filter(Decade != is.na(Decade))
NHM_Pangolins <- NHM_Pangolins %>% select(-c(NOTES))
# head(NHM_Pangolins)
IUCN <- prepIUCNData(IUCN)
# head(IUCN)
NHM_Pangolins <- matchBinomial(NHM_Pangolins, IUCN)
NHM_Pangolins <- fixTypeNames(NHM_Pangolins)
NHM_Pangolins$Extent..m. <- (NHM_Pangolins$Extent..m. /1000)
NHM_Pangolins <- NHM_Pangolins %>% rename(Extent_km = Extent..m.)
NHM_Pangolins <- addError(NHM_Pangolins)
# head(NHM_Pangolins)
# This function plots maps, but does not display them, it plots and saves them
# in a pre-made destination folder which you are prompted to enter the path to
# when you run this funciton. This both saves computer time and memory, whilst
# allowing you as the user to browse all the maps at your leisure.
plotMaps(NHM_Pangolins, IUCN, path = '../output/point_radius_graphs/')
# Here is an example of a single plot from that command, or how to plot just one
# graph that is of interest
egForPlot <-NHM_Pangolins %>% filter(binomial == 'Smutsia_temminckii')
IUCNForPlot <- IUCN %>% filter(binomial == 'Smutsia_temminckii')
# puts the coords into the order expected down in ggmap coords
bbox <- c(-14.414063,-37.996163,53.613281,27.994401)
xlim <- c(bbox[1], bbox[3])
ylim <- c(bbox[2], bbox[4])
landMap <- rnaturalearth::ne_countries(returnclass = 'sf') %>%
st_union()
p = ggplot(data = landMap) +
geom_sf() +
geom_sf(mapping = aes(alpha = 0.5, fill='blue'), data = egForPlot , show.legend = F) +
geom_sf(mapping = aes(alpha = 0.1, fill = "red"), data = IUCNForPlot, show.legend = F) +
coord_sf(xlim = xlim, ylim = ylim, expand = T)
print(p)
# For speed and viewability we strip out all the extraneous stuff,
# we just need the species name and the geometry
myvars <- c('binomial', 'geometry')
IUCN <- IUCN[myvars]
IUCN <- resolveIUCNGeom(IUCN)
IUCN <- st_as_sf(IUCN)
# class(IUCN)
# head(IUCN)
# NHM_Pangolins$Percent_overlap <- NA
# head(NHM_Pangolins)
NHM_Pangolins <- calculateOverlaps(NHM_Pangolins, IUCN)
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- NHM_Pangolins
# This first function creates convex hulls, without any clipping to landmasses
NHM_Pangolins_hulls <- makeConvexHulls(NHM_Pangolins_hulls)
# And this function takes those hulls and clips them to landmasses
# head(NHM_Pangolins)
NHM_Pangolins_hulls <- clipHullsToLand(NHM_Pangolins_hulls)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
View(NHM_Pangolins)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
NHM_Pangolins <- binomialOverlap(NHM_Pangolins)
View(NHM_Pangolins)
library(sfe)
library(sfe)
library(rgeos)
library(rgdal)
library(ggplot2)
countNumbSpecimens <- function(x) {
NHM_Pangolins['numberOfSpecimens'] <- NA
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
#print(subsetOfDf)
x$numberOfSpecimens <- (length(subsetOfDf$binomial))
}
return(x)
}
NHM_Pangolins <- countNumbSpecimens(NHM_Pangolins)
countNumbOverlaps <- function(x) {
NHM_Pangolins['numberOfOverlaps'] <- NA
for (var in unique(x$binomial)) {
# print(var)
subsetOfDf <- x[x$binomial == var,]
#print(subsetOfDf)
x$numberOfOverlaps <- (length(subsetOfDf$binomial_overlaps == 1))
}
return(x)
}
NHM_Pangolins <- countNumbOverlaps(NHM_Pangolins)
View(NHM_Pangolins)
